;;*****************************************************************************
;;
;; Title:       ClipBoard.dbl
;;
;; Type:        Class
;;
;; Description: A class that provides basic copy/paste interaction with the
;;              Windows clipboard. The class requires access to the window
;;              handle (HWND) of a window to which the clipboard can be
;;              captured, and the only way to get the HWND in a Traditional
;;              synergy application is via the Synergy Windows API (or the
;;              UI Toolkit which used the Synergy Windows API). For this
;;              reason the clipbaord routines will not work unless you
;;              AT LEAST call %W_INIT.
;;
;; Date:        23rd September 2014
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2014, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

.include "WND:windows.def"

namespace SynPSG.Examples

	public class Clipboard
		
		private user32,			D_ADDR		;;DLL Handle for user32.dll
		private kernel32,		D_ADDR		;;DLL handle for kernel32.dll
		
		private CF_TEXT,		i4, 1		;;Clipboard format "text"
		private GMEM_MOVEABLE,	i4,	2
		private GMEM_DDESHARE,	i4, 8192	;;
		
		structure oneCharacterStructure	;;Structure to allow us to use ^m to access memory one character at a time
							,a1
		endstructure
		
		;;; <summary>
		;;; Constructor, opens DLL's
		;;; </summary>
		public method Clipboard
		proc
			user32 = %dll_open("user32.dll")
			kernel32 = %dll_open("kernel32.dll")
		endmethod
		
		;;; <summary>
		;;; Destructor - closes DLL's
		;;; </summary>
		method ~Clipboard
		proc
			user32 = %dll_close(user32)
			kernel32 = %dll_close(kernel32)
		endmethod
		
		;;; <summary>
		;;; Copy method. Copies data TO the clipboard.
		;;; </summary>
		;;; <param name="text">Text to save to the clipboard.</param>
		public method Copy, void
			required in text, String
			endparams
		proc
			;;Open the clipboard and associate it with the current window
			if (%dll_call(user32,DLL_TYPE_WINAPI,"OpenClipboard",%w_info(WIF_HWND,WIFH_CONTAINER)))
			begin
				data clipBuffer, D_ADDR
				data addressOfFirstCharacter, D_ADDR
				data memHandle, i4

				;;Rmeove anything that is currently on the clipboard
				xcall dll_call(user32,DLL_TYPE_WINAPI,"EmptyClipboard")
				
				;;Get a handle to heap memory to store the text and a terminating null.
				clipBuffer = %dll_call(kernel32,DLL_TYPE_WINAPI,"GlobalAlloc",GMEM_MOVEABLE,text.Length+1)

				;;Get a lock on the global memory object and a pointer to the first byte
				addressOfFirstCharacter = %dll_call(kernel32,DLL_TYPE_WINAPI,"GlobalLock",clipBuffer)

				;;Allocate Synergy dynamic memory over the top of the heap memory and put the data into it
				memHandle = %mem_proc(DM_REG,text.Length+1,addressOfFirstCharacter)
				^m(memHandle) = (a)text
				memHandle = %mem_proc(DM_FREE,memHandle)

				;;Release the lock on the global memory
				xcall dll_call(kernel32,DLL_TYPE_WINAPI,"GlobalUnlock",clipBuffer)
				
				;;Put the data onto the clipboard
				xcall dll_call(user32,DLL_TYPE_WINAPI,"SetClipboardData",CF_TEXT,clipBuffer)
				
				;;Close the clipboard
				xcall dll_call(user32,DLL_TYPE_WINAPI,"CloseClipboard")
			end
		endmethod

		;;; <summary>
		;;; Paste method. Copies data FROM the clipboard.
		;;; </summary>
		;;; <returns>Text from clipboard.</returns>
		public method Paste, string
			endparams
			record 
				clipboardData, string
			endrecord
		proc
			clipboardData = ""
			;;Is there text available on the clipboard?
			if (%dll_call(user32,DLL_TYPE_WINAPI,"IsClipboardFormatAvailable",CF_TEXT))
			begin
				;;Open the clipboard
				if (%dll_call(user32,DLL_TYPE_WINAPI,"OpenClipboard",%w_info(WIF_HWND,WIFH_CONTAINER)))
				begin
					;;Get a handle to the text data that is on the clipboard
					data clipBuffer, D_ADDR, %dll_call(user32,DLL_TYPE_WINAPI,"GetClipboardData",CF_TEXT)
					if (clipBuffer)
					begin
						;;Get a lock on the global memory object and a pointer to the first byte
						data addressOfFirstCharacter, D_ADDR, %dll_call(kernel32,DLL_TYPE_WINAPI,"GlobalLock",clipBuffer)
						;;We don't know how big the text is, so create a 64K dynamic memory handle starting in the same place 
						data memoryHandle, i4, %mem_proc(DM_REG,64*1024,addressOfFirstCharacter)
						;;Access the data character by chaeacter until we find a terminating null character
						data offset, i4, 0
						repeat
						begin
							data nextCharacter, String, ^m(oneCharacterStructure[offset+=1],memoryHandle)
							if (nextCharacter != %char(0)) then
								clipboardData += nextCharacter
							else
								exitloop
						end
						;;Release the synamic memory
						memoryHandle = %mem_proc(DM_FREE,memoryHandle)
						;;Release the lock on the global memory
						xcall dll_call(kernel32,DLL_TYPE_WINAPI,"GlobalUnlock",clipBuffer)
					end
					;;Close the clipboard
					xcall dll_call(user32,DLL_TYPE_WINAPI,"CloseClipboard")
				end
			end
			mreturn clipboardData
		endmethod
		
	endclass
	
endnamespace
